package org.fgiloux.camel.amq.fake;

import org.apache.camel.CamelContext;
import org.apache.camel.ConsumerTemplate;
import org.apache.camel.ProducerTemplate;
import org.apache.commons.io.FileUtils;
import org.fgiloux.camel.amq.fake.Application;
import org.apache.camel.test.spring.CamelSpringBootRunner;

import static org.junit.Assert.*;

import java.io.File;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.annotation.DirtiesContext;
// import org.springframework.test.context.ActiveProfiles;

// Embedded Artemis should be used for component testing
// as it provides isolation and repeatability.
// https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-messaging.html
	
//@TestPropertySource("classpath:test-application.properties")
// test-application.properties would contain the information for the embedded broker
// username and password can be generated by maven and injected from there.

@RunWith(CamelSpringBootRunner.class)
@SpringBootTest(classes = Application.class)
//@ActiveProfiles("test")
@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)
public class ComponentTest {
	
	protected static final Logger LOG = LoggerFactory.getLogger(ComponentTest.class);
	
	@Autowired
    CamelContext context;

    @Autowired
    ProducerTemplate producer;
    
    @Autowired
    ConsumerTemplate consumer;
    	
	@Test
	public void testMainRouteE2E() throws Exception {
		context.start();
		String body = FileUtils.readFileToString(new File("src/test/data/body1.txt"));
		producer.sendBody("amqp:{{message.input}}", body);
		// Let give up to 5s to receive the message
		final int WAIT_LIMIT = 5000;
		String message = consumer.receiveBody("amqp:{{message.output}}", WAIT_LIMIT, String.class);
		LOG.info("Message received: {}", message);
		assertNotNull(message);
		assertEquals(body.trim(),message.trim());
		context.stop();
	}
}
